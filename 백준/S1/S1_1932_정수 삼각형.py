# 문제
'''
삼각형을 트리로 보겠음
트리에서 수를 각 층당 하나의 수를 선택할 때,
아래층은 위층의 자식 노드만 선택될 수 있음
모든 층에 하나의 수만 선택하여 총합을 구할 때, 최대 총합을 구하라
'''

# 아이디어
'''
각 층에서 최대값이 총합의 최대값은 아니다!!
즉 한 층에서 최대값인 노드까지의 합 1개만 구하는게 아니라 모든 노드까지의 총합 n개를 다 구해봐야한다.
마지막 층(맨 아래 층)의 자식들까지의 선택된 수들의 총합 중 최대값이 정답
트리의 맨 오른쪽과 맨 왼쪽은 부모가 하나니 해당 부모까지의 합에 자식을 더한 값이 현재 자식까지의 선택된 수들의 합
트리의 중간 자식들은 부모가 2이니 각 부모까지의 총합 중 큰 값과 현재 자식을 더한 값이 현재 자식까지의 선택된 수들의 합
'''
# 블로그 참고
import sys
input = sys.stdin.readline
n = int(input())
a = [[int(x) for x in input().split()] for _ in range(n)]

# 각 행에 1,2,3...개의 열이 있도록 정의
dp = [[0] * i for i in range(1, n+1)]
dp[0][0] = a[0][0]

# i행엔 i개의 열이 있음 -> range(i+1): 0 ~ i
for i in range(1, n):
    for j in range(i+1):
        # 삼각형의 맨 왼쪽과 오른쪽 수일 때, 부모는 하나니까 그냥 따로 max 처리 없이 부모와 본인 더하기
        if j == 0:
            dp[i][j] = dp[i-1][j] + a[i][j]
        elif j == i:
            dp[i][j] = dp[i-1][j-1] + a[i][j]
        # 삼각형의 중간일 땐 부모가 둘 -> 그 중 큰 값을 선택하여 본인과 더하기
        else:
            dp[i][j] = max(dp[i-1][j-1] + a[i][j], dp[i-1][j] + a[i][j])

print(max(dp[-1]))