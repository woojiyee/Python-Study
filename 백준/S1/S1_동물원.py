# DP 다이나믹 프로그래밍

# 문제
'''우리는 2(가로)*n(세로) 크기
사자를 배치하는 경우의 수를 9901로 나눈 나머지를 출력하여라'''

# 1st
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01
dp = [[0] * 3  for i in range(n+1)]
dp[1] = [1,1,1]

for i in range(2,n+1):
    # 마즈막 줄이 00인 경우는 아래에 00,10,01이 다 추가 가능
    dp[i][0] += dp[i-1][0]
    dp[i][1] += dp[i-1][0]
    dp[i][2] += dp[i-1][0]

    # 마즈막 줄이 10인 경우는 아래 줄에 00,01 추가 가능
    dp[i][0] += dp[i-1][1]
    dp[i][2] += dp[i-1][1]

    # 마즈막 줄이 01인 경우는 아래 줄에 00,10이 추가 가능
    dp[i][0] += dp[i-1][2]
    dp[i][1] += dp[i-1][2]

print(sum(dp[n]))
'''
# 1st 메모리 초과 뜸

# 2nd
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01

dp = [[0] * 3  for i in range(n+1)]
dp[1] = [1,1,1]
print(dp)


for i in range(2,n+1):
    # 마즈막 줄이 00인 경우는 아래에 00,10,01이 다 추가 가능
    dp[i][0] += dp[i-1][0] + dp[i-1][1] + dp[i-1][2]
    dp[i][1] += dp[i-1][0] + dp[i-1][2]
    dp[i][2] += dp[i-1][0] + dp[i-1][1]

print(sum(dp[n]))'''

#  2nd 메모리 초과 뜸

# 6th
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01
dp = [[0] * 3  for i in range(n+1)]
dp[1] = [1,1,1]

for i in range(2,n+1):
    # 마즈막 줄이 00인 경우는 아래에 00,10,01이 다 추가 가능
    dp[i][0] += (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) %  9901
    dp[i][1] += (dp[i-1][0] + dp[i-1][2]) %  9901
    dp[i][2] += (dp[i-1][0] + dp[i-1][1]) %  9901

print(sum(dp[n]))
'''
# 6th 틀렸습니다 가 뜸

# 7th
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01
dp = [[0] * 3  for i in range(n+1)]
dp[1] = [1,1,1]

for i in range(2,n+1):
    # 마즈막 줄이 00인 경우는 아래에 00,10,01이 다 추가 가능
    dp[i][0] += (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) %  9901
    dp[i][1] += (dp[i-1][0] + dp[i-1][2]) %  9901
    dp[i][2] += (dp[i-1][0] + dp[i-1][1]) %  9901

print(sum(dp[n]) %  9901)
'''
# 7th 맞았습니다가 뜸

# 8th
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01
dp = [[0] * 3  for i in range(n+1)]
dp[1] = [1,1,1]

for i in range(2,n+1):
    # 마즈막 줄이 00인 경우는 아래에 00,10,01이 다 추가 가능
    dp[i][0] += dp[i-1][0] + dp[i-1][1] + dp[i-1][2]
    dp[i][1] += dp[i-1][0] + dp[i-1][2]
    dp[i][2] += dp[i-1][0] + dp[i-1][1]

print(sum(dp[n]) %  9901)
'''

# 8th 메모리 초과 가 뜸

# 3rd
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01
dp = [1,1,1]

for i in range(2,n+1):
    # 위에 줄이 [00][10][01]일 때 다 아래줄에 [00]이 추가될 수 있음
    # -> 현재 마즈막 줄이 [00]인 경우(a)의 수는 위에 줄의 경우를 다 더한 값
    a = dp[0] + dp[1] + dp[2]
    # 위에 줄이 [00][01]일 때 다 아래줄에 [10]이 추가될 수 있음
    # -> 현재 마즈막 줄이 [10]인 경우의 수는 위에 줄의 [00][01] 경우를 더한 값
    b = dp[0] + dp[2]
    c = dp[0] + dp[1]
    # 따로 a,b,c 없이 dp[0] += dp[0]+dp[1]+dp[2]로 하게 되면 
    # dp[1] += dp[0] +dp[2]할 때 dp[0]이 전 줄의 [00]인 경우의 수가 아니라 현재 줄의 [00]인 경우의 수라 원하지 않는 계산이 됨
    # dp[0],dp[1],dp[2]가 동시에 전 줄 경우의 수를 더해야 하는데 dp에다 +=으로 해버리면 동시가 아닌 코드 순서대로 더한 격이라 맞지 않음
    # 따라서 a,b,c를 통해 위에 줄 경우의 수를 더한 값을 구한 뒤 각 dp에 대입
    dp[0] = a
    dp[1] = b
    dp[2] = c

print(sum(dp))
'''
# 3rd 출력 초과 뜸

# 4th
'''
#우리의 세로 칸 수
n = int(input())

# 우리의 마즈막 세로 줄 사자 유무
# 00 10 01
dp = [1,1,1]

for i in range(2,n+1):
    # 위에 줄이 [00][10][01]일 때 다 아래줄에 [00]이 추가될 수 있음
    # -> 현재 마즈막 줄이 [00]인 경우(a)의 수는 위에 줄의 경우를 다 더한 값
    a = dp[0] + dp[1] + dp[2]
    # 위에 줄이 [00][01]일 때 다 아래줄에 [10]이 추가될 수 있음
    # -> 현재 마즈막 줄이 [10]인 경우의 수는 위에 줄의 [00][01] 경우를 더한 값
    b = dp[0] + dp[2]
    c = dp[0] + dp[1]
    # 따로 a,b,c 없이 dp[0] += dp[0]+dp[1]+dp[2]로 하게 되면 
    # dp[1] += dp[0] +dp[2]할 때 dp[0]이 전 줄의 [00]인 경우의 수가 아니라 현재 줄의 [00]인 경우의 수라 원하지 않는 계산이 됨
    # dp[0],dp[1],dp[2]가 동시에 전 줄 경우의 수를 더해야 하는데 dp에다 +=으로 해버리면 동시가 아닌 코드 순서대로 더한 격이라 맞지 않음
    # 따라서 a,b,c를 통해 위에 줄 경우의 수를 더한 값을 구한 뒤 각 dp에 대입
    dp[0] = a
    dp[1] = b
    dp[2] = c

print(sum(dp) %  9901)
'''
#4th 맞았습니다 뜸